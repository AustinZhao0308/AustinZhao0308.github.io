[{"title":"Welcome to my blog!","url":"/2022/03/10/Welcome-to-my-blog/","content":"Hello!\nI’m Austin Zhao. \nA Chinese college student from ECNU.\n","categories":["About Me"]},{"title":"Hello World","url":"/2022/03/09/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"操作系统-线程实现的两种方式：用户空间与内核中","url":"/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%86%85%E6%A0%B8%E4%B8%AD/","content":"在用户空间中实现进程特点：整个线程包都会被放入用户空间之中，而内核对线程包一无所知。从内核的角度来说，他的管理方式就是普通的单线程进程。\n\n优点：\n    用户级线程包可以在不支持线程的操作系统上实现\n    这种方式的线程切换明显比内核的方式要快\n    允许每个进程自定义其自己的调度算法\n\n\n缺点\n    当线程进行I/O操作或页面故障引起阻塞的时候，如果调用阻塞系统调用则由于内核不知道有多线程存在，会阻塞整个进程而导致所有线程都被阻塞\n    一个单独的进程内部不存在时钟中断，所以不可能使用轮转调度的方式来调度线程\n\n\n\n    \n    \n\n\n在内核中实现进程特点：当某个线程希望创建一个新的线程或者撤销一个已有的线程的时候，它会进行一个系统调用，这个系统调用通过对线程的更新来完成线程创建或撤销工作\n\n优点：\n    所有能阻塞线程的调用都以系统调用的形式实现\n    如果某个线程引起了页面障碍，内核可以很方便的检查该进程是否有任何其他可运行的线程\n\n\n\n    \n    \n\n\n混合实现使用内核级线程，然后将用户级线程与某些或全部内核线路多路复用，如下图\n\n\n","categories":["-[操作系统]"],"tags":["操作系统","学习笔记"]}]