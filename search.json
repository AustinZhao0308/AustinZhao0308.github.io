[{"title":"Welcome to my blog!","url":"/2022/03/10/Welcome-to-my-blog/","content":"Hello!\nI’m Austin Zhao. \nA Chinese college student from ECNU.\n","categories":["About Me"]},{"title":"Hello World","url":"/2022/03/09/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"操作系统-线程实现的两种方式：用户空间与内核中","url":"/2022/05/01/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F%EF%BC%9A%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E4%B8%8E%E5%86%85%E6%A0%B8%E4%B8%AD/","content":"在用户空间中实现进程特点：整个线程包都会被放入用户空间之中，而内核对线程包一无所知。从内核的角度来说，他的管理方式就是普通的单线程进程。\n\n优点：\n    用户级线程包可以在不支持线程的操作系统上实现\n    这种方式的线程切换明显比内核的方式要快\n    允许每个进程自定义其自己的调度算法\n\n\n缺点\n    当线程进行I/O操作或页面故障引起阻塞的时候，如果调用阻塞系统调用则由于内核不知道有多线程存在，会阻塞整个进程而导致所有线程都被阻塞\n    一个单独的进程内部不存在时钟中断，所以不可能使用轮转调度的方式来调度线程\n\n\n\n    \n    \n\n\n在内核中实现进程特点：当某个线程希望创建一个新的线程或者撤销一个已有的线程的时候，它会进行一个系统调用，这个系统调用通过对线程的更新来完成线程创建或撤销工作\n\n优点：\n    所有能阻塞线程的调用都以系统调用的形式实现\n    如果某个线程引起了页面障碍，内核可以很方便的检查该进程是否有任何其他可运行的线程\n\n\n\n    \n    \n\n\n混合实现使用内核级线程，然后将用户级线程与某些或全部内核线路多路复用，如下图\n\n\n","categories":["操作系统"],"tags":["操作系统","学习笔记"]},{"title":"PyScript: 浏览器中的Python","url":"/2022/05/19/PyScript-%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84Python/","content":"什么是PyScript？PyScript是一款由Anaconda的团队开发，的用于HTML中使用Python的系统。让我们可以在PyScript中调用JavaScript库，并使用Python进行Web开发。\n\n\n\n\nPyScript可以为我们带来什么？首先，最明显的就是我们现在可以使用Python来进行Web应用程序的构建了！\n并且在使用PyScript时我们并不需要担心部署，PyScript提供了“architectural shift beyond the cloud”。即一切转变都将在网络浏览器中发生。\n但是需要注意的是，虽然PyScript给我们提供了便利，但是它的运行速度也是我们需要考虑的问题。\n\n\n我们应该如何开始使用PyScript？ PyScript目前提供了两种使用的方式，分别是把官方提供的css于js文件下载或直接线上调用，并分别使用如下的语句将他们引用在你的HTML代码中：\n&lt;link rel=&quot;stylesheet&quot; href=&quot;path/to/pyscript.css&quot; /&gt;&lt;script defer src=&quot;path/to/pyscript.js&quot;&gt;&lt;/script&gt;\n\n&lt;link rel=&quot;stylesheet&quot; href=&quot;https://pyscript.net/alpha/pyscript.css&quot; /&gt;&lt;script defer src=&quot;https://pyscript.net/alpha/pyscript.js&quot;&gt;&lt;/script&gt;\n\n不过我非常建议你使用第一种方式，因为经过实际测试第二种方式会消耗大量的时间(真的很慢！！！！！)\n在完成上述工作之后，我们就可以在HTML中加入我们的Python代码了！不过首先我们要学习的就是PyScript的三个主要组件：py-env, py-script, py-repl。\n\npy-env：这个组件用于引入在我们python代码中要使用的python包\n\npy-script：这个组件就是我们编写在网页中执行的python代码的地方\n\npy-repl：用于创建一个REPL(读取-评估-打印 循环)，用于评估用户输入的代码并显示结果。\n\n\npy-env在如下例子中，我们想将包numpy、pandas和scikit-learn加载到我们的环境中\n&lt;py-env&gt;    - numpy    - pandas    - scikit-learn&lt;/py-env&gt;\n\npy-script使用py-script组件时，我们可以选择引入写好的python文件或者直接在HTML代码中书写的方式 (类似于JavaScript)。\n&lt;py-script src=&quot;/python_file.py&quot;&gt;  &lt;/py-script&gt;\n\n&lt;py-script&gt; print(&quot;Hello PyScript!&quot;) &lt;/py-script&gt;\n\npy-repl这里我们引用anaconda官网上的例子，这个示例使用了DeckGL和REPL组件演示了具有NYC Taxi数据的Panel dashboard。如下图，我们可以在REPL中定义半径并选择dataframe的子集！\n\n示例源代码地址：https://github.com/pyscript/pyscript/blob/main/pyscriptjs/examples/panel_deckgl.html\n我们介绍了PyScript中的各个组件的作用，如果想要尝试更多也可以去到PyScript Github界面上来获取更多的示例代码。\n\n\nPyScript是如何开发的最后我们来介绍一下PyScript的技术栈：PyScript目前是基于Pyodide构建的，Pyodide是一个”CPython到WebAssembly&#x2F;Emscripten的端口”。PyScript目前支持在浏览器中使用Python，后续还将提供对其他语言的支持。\n\n\n参考\n[1] Anaconda Nucleus\n[2] GitHub - pyscript&#x2F;pyscript: Home Page: https://pyscript.net Examples: https://pyscript.net/examples\n[3] Pyodide &amp;#8212; Version 0.20.0\n\n","categories":["Web"],"tags":["Web","Python"]}]